/// <reference types="node" resolution-mode="require"/>
import { EventEmitter } from 'node:events';
import type { Capabilities, Options } from '@wdio/types';
import { After, AfterAll, AfterStep, Before, BeforeAll, BeforeStep, Given, When, Then, setDefaultTimeout, setDefinitionFunctionWrapper, setWorldConstructor, defineParameterType, defineStep, DataTable, World } from '@cucumber/cucumber';
import type { GherkinDocument } from '@cucumber/messages';
import type Cucumber from '@cucumber/cucumber';
import type { CucumberOptions, HookFunctionExtension as HookFunctionExtensionImport } from './types.js';
export declare const FILE_PROTOCOL = "file://";
declare class CucumberAdapter {
    private _cid;
    private _config;
    private _specs;
    private _capabilities;
    private _reporter;
    private _eventEmitter;
    private _generateSkipTags;
    private _cucumberFormatter;
    private _cwd;
    private _newId;
    private _cucumberOpts;
    private _hasTests;
    private gherkinParser;
    constructor(_cid: string, _config: Options.Testrunner, _specs: string[], _capabilities: Capabilities.RemoteCapability, _reporter: EventEmitter, _eventEmitter: EventEmitter, _generateSkipTags?: boolean, _cucumberFormatter?: string);
    readFiles(filePaths?: Options.Testrunner['specs']): (string | string[])[];
    getGherkinDocuments(files?: Options.Testrunner['specs']): (GherkinDocument | GherkinDocument[])[];
    generateDynamicSkipTags(): string[];
    init(): Promise<this>;
    hasTests(): boolean;
    run(): Promise<number | undefined>;
    /**
     * Transpilation https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#transpilation
     * Usage: `['module']`
     * we extend it a bit with ability to init and pass configuration to modules.
     * Pass an array with path to module and its configuration instead:
     * Usage: `[['module', {}]]`
     * Or pass your own function
     * Usage: `[() => { require('@babel/register')({ ignore: [] }) }]`
     */
    registerRequiredModules(): Promise<void[]>;
    loadFilesWithType(fileList: string[]): Promise<string[]>;
    loadAndRefreshModule(modules: string[]): Promise<any[]>;
    loadFiles(): Promise<void>;
    /**
     * set `beforeFeature`, `afterFeature`, `beforeScenario`, `afterScenario`, 'beforeStep', 'afterStep'
     * @param {object} config config
     */
    addWdioHooksAndWrapSteps(config: Options.Testrunner, supportCodeLibraryBuilder: typeof Cucumber.supportCodeLibraryBuilder): void;
}
/**
 * Publishes a Cucumber report to a specified URL using NDJSON files from a directory.
 * @async
 * @param {string} cucumberMessageDir - The directory path that holds Cucumber NDJSON files.
 * @returns {Promise<void>} - A Promise that resolves when the report is successfully published.
 * @throws {Error} - Throws an error if there are issues with file reading or the publishing process.
 */
declare const publishCucumberReport: (cucumberMessageDir: string) => Promise<void>;
declare const adapterFactory: {
    init?: Function;
};
export default adapterFactory;
export { CucumberAdapter, adapterFactory, After, AfterAll, AfterStep, Before, BeforeAll, BeforeStep, Given, When, Then, DataTable, World, setDefaultTimeout, setDefinitionFunctionWrapper, setWorldConstructor, defineParameterType, defineStep, publishCucumberReport };
declare global {
    namespace WebdriverIO {
        interface CucumberOpts extends CucumberOptions {
        }
        interface HookFunctionExtension extends HookFunctionExtensionImport {
        }
    }
}
//# sourceMappingURL=index.d.ts.map